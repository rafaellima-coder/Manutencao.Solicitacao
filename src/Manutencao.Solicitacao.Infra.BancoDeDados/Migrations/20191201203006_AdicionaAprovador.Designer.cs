// <auto-generated />
using System;
using Manutencao.Solicitacao.Infra.BancoDeDados.Contexto;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Manutencao.Solicitacao.Infra.BancoDeDados.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20191201203006_AdicionaAprovador")]
    partial class AdicionaAprovador
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Manutencao.Solicitacao.Dominio.SolicitacoesDeManutencao.SolicitacaoDeManutencao", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataDaSolicitacao");

                    b.Property<string>("IdentificadorDaSubsidiaria");

                    b.Property<DateTime>("InicioDesejadoParaManutencao");

                    b.Property<string>("Justificativa");

                    b.Property<int>("StatusDaSolicitacao");

                    b.Property<int>("TipoDeSolicitacaoDeManutencao");

                    b.HasKey("Id");

                    b.ToTable("SolicitacaoDeManutecao");
                });

            modelBuilder.Entity("Manutencao.Solicitacao.Dominio.Subsidiarias.Subsidiaria", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.ToTable("Subsidiarias");
                });

            modelBuilder.Entity("Manutencao.Solicitacao.Dominio.SolicitacoesDeManutencao.SolicitacaoDeManutencao", b =>
                {
                    b.OwnsOne("Manutencao.Solicitacao.Dominio.SolicitacoesDeManutencao.Contrato", "Contrato", b1 =>
                        {
                            b1.Property<string>("SolicitacaoDeManutencaoId");

                            b1.Property<string>("CnpjDaTerceirizada");

                            b1.Property<DateTime>("DataFinalDaVigencia");

                            b1.Property<string>("GestorDoContrato");

                            b1.Property<string>("NomeDaTerceirizada");

                            b1.Property<string>("Numero");

                            b1.HasKey("SolicitacaoDeManutencaoId");

                            b1.ToTable("SolicitacaoDeManutecao");

                            b1.HasOne("Manutencao.Solicitacao.Dominio.SolicitacoesDeManutencao.SolicitacaoDeManutencao")
                                .WithOne("Contrato")
                                .HasForeignKey("Manutencao.Solicitacao.Dominio.SolicitacoesDeManutencao.Contrato", "SolicitacaoDeManutencaoId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Manutencao.Solicitacao.Dominio.SolicitacoesDeManutencao.Autor", "Aprovador", b1 =>
                        {
                            b1.Property<string>("SolicitacaoDeManutencaoId");

                            b1.Property<int>("Identificador");

                            b1.Property<string>("Nome");

                            b1.HasKey("SolicitacaoDeManutencaoId");

                            b1.ToTable("SolicitacaoDeManutecao");

                            b1.HasOne("Manutencao.Solicitacao.Dominio.SolicitacoesDeManutencao.SolicitacaoDeManutencao")
                                .WithOne("Aprovador")
                                .HasForeignKey("Manutencao.Solicitacao.Dominio.SolicitacoesDeManutencao.Autor", "SolicitacaoDeManutencaoId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Manutencao.Solicitacao.Dominio.SolicitacoesDeManutencao.Autor", "Solicitante", b1 =>
                        {
                            b1.Property<string>("SolicitacaoDeManutencaoId");

                            b1.Property<int>("Identificador");

                            b1.Property<string>("Nome");

                            b1.HasKey("SolicitacaoDeManutencaoId");

                            b1.ToTable("SolicitacaoDeManutecao");

                            b1.HasOne("Manutencao.Solicitacao.Dominio.SolicitacoesDeManutencao.SolicitacaoDeManutencao")
                                .WithOne("Solicitante")
                                .HasForeignKey("Manutencao.Solicitacao.Dominio.SolicitacoesDeManutencao.Autor", "SolicitacaoDeManutencaoId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
